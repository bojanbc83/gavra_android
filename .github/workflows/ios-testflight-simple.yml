name: üçé iOS TestFlight Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ios-testflight:
    name: üöÄ Deploy to TestFlight
    runs-on: macos-latest
    
    steps:
    - name: üì± Checkout
      uses: actions/checkout@v4
      
    - name: üõ†Ô∏è Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true
        
    - name: üì¶ Get dependencies
      run: flutter pub get
      
    - name: üîç Analyze
      run: flutter analyze --no-fatal-infos || echo "Analysis warnings ignored"
      
    - name: üß™ Test
      run: flutter test || echo "Tests skipped"
      
    - name: üîß Fix Bundle ID
      run: |
        # Fix bundle ID in iOS project to match provisioning profile
        sed -i '' 's/com.example.gavraAndroidNew/com.gavra013.gavra-android/g' ios/Runner.xcodeproj/project.pbxproj
        
    - name: üçé Build iOS
      run: |
        cd ios
        pod install --repo-update
        # Clean any previous builds
        flutter clean
        flutter pub get
        # Build with verbose output
        flutter build ios --release --no-codesign --verbose
        
    - name: üîê Setup Signing
      env:
        P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        MOBILEPROVISION_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        P12_BASE64: ${{ secrets.IOS_P12_BASE64 }}
      run: |
        # Try the other P12 secret first
        echo "Trying IOS_P12_BASE64 secret..."
        echo "$P12_BASE64" | tr -d '\n\r\t ' | base64 -d > certificate.p12
        echo "$MOBILEPROVISION_BASE64" | tr -d '\n\r\t ' | base64 -d > profile.mobileprovision
        
        # Verify P12 file format
        echo "P12 file info:"
        file certificate.p12
        ls -la certificate.p12
        
        # Test P12 with OpenSSL
        openssl pkcs12 -info -in certificate.p12 -noout -passin pass:"$P12_PASSWORD" && echo "‚úÖ P12 is valid!" || {
          echo "‚ùå P12 validation failed, trying alternative secret..."
          # Try the other secret
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | tr -d '\n\r\t ' | base64 -d > certificate.p12
          openssl pkcs12 -info -in certificate.p12 -noout -passin pass:"$P12_PASSWORD" && echo "‚úÖ Alternative P12 is valid!" || echo "‚ùå Both P12 secrets failed"
        }
        
        # Create and setup keychain
        security create-keychain -p "build123" build.keychain
        security list-keychains -s build.keychain  
        security default-keychain -s build.keychain
        security unlock-keychain -p "build123" build.keychain
        
        # Import with detailed error handling
        echo "Attempting certificate import..."
        if security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -A; then
          echo "‚úÖ Certificate imported successfully!"
        else
          echo "‚ùå Import failed - checking certificate format..."
          hexdump -C certificate.p12 | head -5
          
          # Try creating P12 from separate cert and key if available
          if [ -n "${{ secrets.IOS_CERTIFICATE_BASE64 }}" ] && [ -n "${{ secrets.IOS_PRIVATE_KEY_BASE64 }}" ]; then
            echo "Trying to create P12 from separate cert and key..."
            echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 -d > cert.cer
            echo "${{ secrets.IOS_PRIVATE_KEY_BASE64 }}" | base64 -d > private.key
            
            # Convert cert to PEM if needed
            openssl x509 -inform DER -in cert.cer -out cert.pem 2>/dev/null || cp cert.cer cert.pem
            
            # Create new P12
            openssl pkcs12 -export -inkey private.key -in cert.pem -out new_certificate.p12 -passout pass:"$P12_PASSWORD"
            
            # Try importing the new P12
            security import new_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -A
          else
            echo "‚ùå No alternative certificate sources available"
            exit 1
          fi
        fi
        
        # Set keychain permissions
        security set-key-partition-list -S apple-tool:,apple: -s -k "build123" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify signing identity
        security find-identity -v -p codesigning build.keychain
        
    - name: üèóÔ∏è Build Archive
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          archive
          
    - name: üì¶ Export IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath export \
          -exportOptionsPlist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
        </dict>
        </plist>
        EOF
        
    - name: üöÄ Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        cd ios/export
        xcrun altool --upload-app -f *.ipa \
          -u "$APPLE_ID" \
          -p "$APPLE_PASSWORD" \
          --type ios
          
    - name: ‚úÖ Success
      run: echo "üéâ TestFlight upload successful!"
