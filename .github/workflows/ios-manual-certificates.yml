name: üéØ iOS TestFlight Manual Certificates

on:
  workflow_dispatch:

jobs:
  ios:
    name: üçé Build & Upload iOS (Manual Certificates)
    runs-on: macos-latest

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4

      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: üê¶ Setup Flutter 3.24.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          channel: "stable"

      - name: üì• Install Flutter Dependencies
        run: flutter pub get

      - name: üîê Setup iOS Certificates & Provisioning Profile
        run: |
          echo "üîê Setting up iOS certificates and provisioning profile..."

          # Create keychain
          security create-keychain -p "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Decode and import certificate
          echo "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign

          # Decode and install provisioning profile
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # Set partition list for codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" build.keychain

          echo "‚úÖ Certificates and provisioning profile setup completed"

      - name: üçé Clean & Build iOS
        run: |
          echo "üßπ Cleaning previous builds..."
          cd ios
          rm -rf Pods build ~/Library/Developer/Xcode/DerivedData/* || true
          pod deintegrate || true

          echo "üì¶ Installing CocoaPods..."
          pod install --repo-update --clean-install

          echo "üèóÔ∏è Building Flutter iOS..."
          cd ..
          flutter clean
          flutter pub get
          flutter build ios --release --no-codesign --verbose

      - name: üèóÔ∏è Create iOS Archive with Manual Signing
        run: |
          echo "üì¶ Creating iOS archive with manual signing..."
          cd ios

          # Use xcodebuild with manual signing
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath Runner.xcarchive \
            CODE_SIGN_STYLE="Manual" \
            DEVELOPMENT_TEAM="6CY9Q44KMQ" \
            PROVISIONING_PROFILE_SPECIFIER="Gavra Android New Distribution" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            archive

      - name: üì¶ Export IPA with Manual Signing
        run: |
          echo "üì§ Exporting IPA for App Store distribution with manual signing..."
          cd ios
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>6CY9Q44KMQ</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.gavra013.gavra-android</key>
                  <string>Gavra Android New Distribution</string>
              </dict>
              <key>signingCertificate</key>
              <string>iPhone Distribution</string>
              <key>uploadSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath Runner.xcarchive \
            -exportPath export \
            -exportOptionsPlist ExportOptions.plist

      - name: üöÄ Upload to TestFlight
        run: |
          echo "üöÄ Uploading to TestFlight using App Store Connect API..."
          cd ios/export

          # Find the IPA file
          IPA_FILE=$(find . -name "*.ipa" | head -n 1)

          if [ -z "$IPA_FILE" ]; then
            echo "‚ùå No IPA file found!"
            exit 1
          fi

          echo "üì± Found IPA file: $IPA_FILE"

          # Upload to TestFlight using xcrun altool with API key authentication
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_FILE" \
            --apiKey "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
            --apiIssuer "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
            --verbose

          echo "‚úÖ Upload to TestFlight completed!"

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up sensitive files..."
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.mobileprovision || true
          echo "‚úÖ Cleanup completed"

      - name: ‚úÖ Success Notification
        run: |
          echo "üéâ iOS app successfully uploaded to TestFlight!"
          echo "üì± Check App Store Connect for processing status"
          echo "üîó https://appstoreconnect.apple.com"
