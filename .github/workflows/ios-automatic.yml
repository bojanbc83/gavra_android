name: üéØ iOS TestFlight Automatic Build

on:
  workflow_dispatch:

jobs:
  ios:
    name: üçé Build & Upload iOS (Automatic)
    runs-on: macos-latest

    steps:
    - name: üì¶ Checkout Repository
      uses: actions/checkout@v4

    - name: ‚òï Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: üê¶ Setup Flutter 3.24.0
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: üì• Install Flutter Dependencies
      run: flutter pub get

    - name: üîê Setup App Store Connect API Authentication
      run: |
        # Create App Store Connect API private key file
        mkdir -p ~/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

        # Set proper permissions
        chmod 600 ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

        # Print for debugging (without revealing sensitive data)
        echo "‚úÖ App Store Connect API key setup completed"
        echo "Key ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}"
        echo "Issuer ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"

    - name: üçé Clean & Build iOS
      run: |
        echo "üßπ Cleaning previous builds..."
        cd ios
        rm -rf Pods build ~/Library/Developer/Xcode/DerivedData/* || true
        pod deintegrate || true

        echo "üì¶ Installing CocoaPods..."
        pod install --repo-update --clean-install

        echo "üèóÔ∏è Building Flutter iOS..."
        cd ..
        flutter clean
        flutter pub get
        flutter build ios --release --no-codesign --verbose

    - name: üèóÔ∏è Create iOS Archive with Automatic Signing & API Auth
      run: |
        echo "üì¶ Creating iOS archive with automatic signing and API authentication..."
        cd ios

        # Use xcodebuild with API authentication
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          CODE_SIGN_STYLE="Automatic" \
          DEVELOPMENT_TEAM="6CY9Q44KMQ" \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          -authenticationKeyPath "$HOME/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8" \
          -authenticationKeyID "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
          -authenticationKeyIssuerID "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
          archive

    - name: üì¶ Export IPA with Automatic Signing
      run: |
        echo "üì§ Exporting IPA for App Store distribution with automatic signing..."
        cd ios
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>6CY9Q44KMQ</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath export \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates \
          -authenticationKeyPath "$HOME/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8" \
          -authenticationKeyID "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
          -authenticationKeyIssuerID "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}"

    - name: üöÄ Upload to TestFlight
      run: |
        echo "üöÄ Uploading to TestFlight using App Store Connect API..."
        cd ios/export

        # Find the IPA file
        IPA_FILE=$(find . -name "*.ipa" | head -n 1)

        if [ -z "$IPA_FILE" ]; then
          echo "‚ùå No IPA file found!"
          exit 1
        fi

        echo "üì± Found IPA file: $IPA_FILE"

        # Upload to TestFlight using xcrun altool with API key authentication
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_FILE" \
          --apiKey "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" \
          --apiIssuer "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" \
          --verbose

        echo "‚úÖ Upload to TestFlight completed!"

    - name: üßπ Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up sensitive files..."
        rm -rf ~/private_keys || true
        echo "‚úÖ Cleanup completed"

    - name: ‚úÖ Success Notification
      run: |
        echo "üéâ iOS app successfully uploaded to TestFlight!"
        echo "üì± Check App Store Connect for processing status"
        echo "üîó https://appstoreconnect.apple.com"
