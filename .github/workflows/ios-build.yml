name: iOS Build and Upload to TestFlight

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-13
    
    env:
      FLUTTER_VERSION: '3.32.5'
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Xcode
      run: |
        echo "📱 Available Xcode versions:"
        ls -la /Applications/ | grep -i xcode || true
        echo "Current Xcode:"
        xcode-select -p || true
        echo "Setting up Xcode..."
        if [ -d "/Applications/Xcode_15.4.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
          echo "✅ Using Xcode 15.4"
        elif [ -d "/Applications/Xcode_15.3.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.3.app/Contents/Developer
          echo "✅ Using Xcode 15.3"
        elif [ -d "/Applications/Xcode_15.2.app" ]; then
          sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          echo "✅ Using Xcode 15.2"
        elif [ -d "/Applications/Xcode.app" ]; then
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer  
          echo "✅ Using default Xcode"
        else
          echo "❌ No Xcode found!"
          exit 1
        fi
        xcode-select -p
        xcodebuild -version
        echo "📱 Available iOS simulators:"
        xcrun simctl list devices | grep -E "(iOS|iPhone)" | head -10
        
    - name: Print Flutter version
      run: flutter --version
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Clean previous builds
      run: |
        flutter clean
        cd ios
        rm -rf Pods Podfile.lock
        rm -rf build/
      
    - name: Analyze project
      run: flutter analyze --no-fatal-infos || true
      
    - name: Run tests
      run: |
        if [ -d "test" ]; then
          flutter test
        else
          echo "No test directory found, skipping tests"
        fi
      
    - name: Verify iOS configuration
      run: |
        echo "📱 Checking iOS configuration..."
        ls -la ios/
        cat ios/Runner/Info.plist | grep -A1 "CFBundleIdentifier"
        echo "GoogleService-Info.plist bundle ID:"
        cat ios/Runner/GoogleService-Info.plist | grep -A1 "BUNDLE_ID"
        echo "Firebase options bundle ID:"
        grep -n "iosBundleId" lib/firebase_options.dart
        
    - name: Install Ruby and Bundler
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ios
        
    - name: Install CocoaPods
      run: |
        cd ios
        pod install --verbose
        
    - name: Configure iOS SDK and Platform
      run: |
        echo "📱 Configuring iOS SDK..."
        # List available iOS SDKs
        xcodebuild -showsdks | grep iphoneos || true
        
        # Set deployment target and SDK
        echo "IPHONEOS_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
        echo "iOS_SDK=iphoneos" >> $GITHUB_ENV
        
        # Show iOS simulators and versions
        xcrun simctl list devices available | grep iOS || true
        
    - name: Setup Fastlane
      run: |
        cd ios
        bundle install
        
    - name: Build iOS app with simple signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        APPLE_API_KEY_ID: F4P3BUR78G
        APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        DEVELOPMENT_TEAM: 6CY9Q44KMQ
        BUNDLE_ID: com.gavra.gavra013
      run: |
        echo "🔨 Building iOS app - SIMPLE APPROACH..."
        
        # Set required iOS build environment
        export DEVELOPMENT_TEAM=6CY9Q44KMQ
        export PRODUCT_BUNDLE_IDENTIFIER=com.gavra.gavra013
        export CODE_SIGN_STYLE=Manual
        export IPHONEOS_DEPLOYMENT_TARGET=14.0
        
        # First, do the basic build that we know works
        flutter build ios --release --no-codesign
        echo "✅ Flutter build completed successfully"
        
        # Now handle signing separately
        echo "🔐 Starting signing process..."
        
        # Create temporary files with validation
        echo "🔐 Creating certificate files..."
        
        # Validate environment variables first
        if [[ -z "$IOS_CERTIFICATE_BASE64" ]]; then
          echo "❌ IOS_CERTIFICATE_BASE64 is empty!"
          exit 1
        fi
        
        echo "Certificate base64 length: ${#IOS_CERTIFICATE_BASE64}"
        
        # Decode certificate with fallback
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > cert.p12 2>/dev/null || \
        echo "$IOS_CERTIFICATE_BASE64" | base64 -d > cert.p12 2>/dev/null || \
        python3 -c "import base64, sys; sys.stdout.buffer.write(base64.b64decode('$IOS_CERTIFICATE_BASE64'))" > cert.p12
        
        # Validate P12 file
        if [[ -f cert.p12 ]] && [[ -s cert.p12 ]]; then
          echo "✅ Certificate file created: $(wc -c < cert.p12) bytes"
          file cert.p12 || echo "File type check failed"
        else
          echo "❌ Certificate file creation failed!"
          exit 1
        fi
        
        # Decode provisioning profile
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision 2>/dev/null || \
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 -d > profile.mobileprovision
        
        echo "✅ Profile file created: $(wc -c < profile.mobileprovision) bytes"
        
        # Create and setup keychain
        security create-keychain -p "build123" build.keychain || true
        security default-keychain -s build.keychain
        security unlock-keychain -p "build123" build.keychain
        
        # Import certificate - try multiple password approaches
        security import cert.p12 -k build.keychain -P "${IOS_CERTIFICATE_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/security || \
        security import cert.p12 -k build.keychain -P "" -T /usr/bin/codesign -T /usr/bin/security || \
        security import cert.p12 -k build.keychain -T /usr/bin/codesign -T /usr/bin/security
        
        security set-key-partition-list -S apple-tool:,apple: -s -k "build123" build.keychain || true
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        echo "✅ Simple signing setup completed"
        
        # Create IPA from APP file for TestFlight upload
        echo "📦 Creating IPA from Flutter build..."
        
        # Check if Runner.app exists
        if [[ -d "build/ios/iphoneos/Runner.app" ]]; then
          echo "✅ Runner.app found"
          
          # Create Payload directory and IPA
          mkdir -p Payload
          cp -r build/ios/iphoneos/Runner.app Payload/
          zip -r Runner.ipa Payload/
          
          # Move to ios directory for Fastlane
          mv Runner.ipa ios/
          echo "✅ IPA created: ios/Runner.ipa"
          
          # Show IPA info
          ls -la ios/Runner.ipa
        else
          echo "❌ Runner.app not found in build/ios/iphoneos/"
          ls -la build/ios/
          exit 1
        fi
        
    - name: Upload to TestFlight
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        APPLE_API_KEY_ID: F4P3BUR78G
        APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      run: |
        cd ios
        echo "🚀 Uploading to TestFlight..."
        
        # Setup App Store Connect API key if available
        if [[ -n "$APPLE_API_KEY_BASE64" ]]; then
          echo "$APPLE_API_KEY_BASE64" | base64 --decode > AuthKey_F4P3BUR78G.p8
          echo "✅ App Store Connect API key created"
        fi
        
        bundle exec fastlane ios upload_testflight
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-artifacts
        path: |
          ios/*.ipa
          ios/build/ios/iphoneos/Runner.ipa
          ios/fastlane/report.xml
        retention-days: 30
