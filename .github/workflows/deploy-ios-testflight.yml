name: üçé Deploy iOS to TestFlight

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes for TestFlight'
        required: false
        default: 'Bug fixes and improvements'

jobs:
  deploy-ios:
    runs-on: macos-latest
    
    steps:
    - name: üçé Checkout repository
      uses: actions/checkout@v4
      
    - name: üõ†Ô∏è Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        cache: true
        
    - name: üì¶ Install dependencies
      run: flutter pub get
      
    - name: üîç Flutter doctor
      run: flutter doctor -v
      
    - name: üçé Setup iOS
      run: |
        # Enable iOS platform
        flutter config --enable-ios
        
        # Create iOS project files with proper organization and bundle ID
        flutter create --platforms=ios --org com.gavra013 .
        
        # Set deployment target to 15.0
        if [ -f ios/Podfile ]; then
          sed -i '' 's/# platform :ios, .*/platform :ios, '\''15.0'\''/' ios/Podfile
          sed -i '' 's/platform :ios, .*/platform :ios, '\''15.0'\''/' ios/Podfile
        fi
        
        if [ -f ios/Runner.xcodeproj/project.pbxproj ]; then
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [^;]*/IPHONEOS_DEPLOYMENT_TARGET = 15.0/g' ios/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = [^;]*/PRODUCT_BUNDLE_IDENTIFIER = com.gavra013.gavra-android/g' ios/Runner.xcodeproj/project.pbxproj
        fi
        
        # Update app display name
        if [ -f ios/Runner/Info.plist ]; then
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName Gavra Android" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleName 'Gavra Android'" ios/Runner/Info.plist
        fi
        
    - name: üîê Setup Code Signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PRIVATE_KEY_BASE64: ${{ secrets.IOS_PRIVATE_KEY_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Create P12 from certificate and private key on-the-fly
        echo $IOS_CERTIFICATE_BASE64 | base64 --decode > ios_distribution.cer
        echo $IOS_PRIVATE_KEY_BASE64 | base64 --decode > ios_private.key
        
        # Convert DER certificate to PEM format first
        openssl x509 -inform DER -in ios_distribution.cer -out ios_distribution.pem
        
        # Convert to P12 format using PEM certificate
        openssl pkcs12 -export -out ios_distribution.p12 \
          -inkey ios_private.key \
          -in ios_distribution.pem \
          -password pass:$IOS_CERTIFICATE_PASSWORD
        
        # Import P12 certificate
        security import ios_distribution.p12 -k $KEYCHAIN_PATH -P $IOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
    - name: üì± Build iOS Release
      run: |
        flutter build ios --release --no-codesign
        
    - name: üîè Archive and Sign
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        cd ios
        
        # Configure signing settings for Release
        sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "'$APPLE_TEAM_ID'";/g' Runner.xcodeproj/project.pbxproj
        sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.example.gavraAndroid;/PRODUCT_BUNDLE_IDENTIFIER = com.gavra013.gavra-android;/g' Runner.xcodeproj/project.pbxproj
        
        # Set signing identity for Release
        sed -i '' '/CODE_SIGN_IDENTITY = "";/s//CODE_SIGN_IDENTITY = "iPhone Distribution";/' Runner.xcodeproj/project.pbxproj
        sed -i '' '/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "";/s//CODE_SIGN_IDENTITY[sdk=iphoneos*] = "iPhone Distribution";/' Runner.xcodeproj/project.pbxproj
        
        # Get provisioning profile UUID
        PROFILE_UUID=$(grep -A1 -a "UUID" ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        echo "Profile UUID: $PROFILE_UUID"
        
        # Set provisioning profile
        sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\";/g" Runner.xcodeproj/project.pbxproj
        
        # Archive
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -archivePath $RUNNER_TEMP/gavra_android.xcarchive \
          -destination "generic/platform=iOS" \
          archive
          
    - name: üì§ Export IPA
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>$APPLE_TEAM_ID</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/gavra_android.xcarchive \
          -exportPath $RUNNER_TEMP \
          -exportOptionsPlist ExportOptions.plist
          
    - name: üöÄ Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file $RUNNER_TEMP/Runner.ipa \
          --username $APPLE_ID \
          --password $APPLE_PASSWORD \
          --verbose
          
    - name: üéâ Success Summary
      run: |
        echo "üéâ iOS APP DEPLOYED TO TESTFLIGHT!"
        echo "‚úÖ Built and signed successfully"
        echo "‚úÖ Uploaded to App Store Connect"
        echo "üì± Check TestFlight for new build"
        echo "üë• Invite testers when ready"
