name: üçé Deploy iOS to TestFlight

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 5.0.0)'
        required: true
        default: '5.0.0'
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

jobs:
  deploy-ios:
    name: üöÄ Build & Deploy iOS
    runs-on: macos-latest
    
    steps:
    - name: üçé Checkout repository
      uses: actions/checkout@v4
      
    - name: üõ†Ô∏è Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        channel: 'stable'
        cache: true
        
    - name: üì¶ Install dependencies
      run: flutter pub get
      
    - name: üîç Flutter doctor
      run: flutter doctor -v
      
    - name: üîß Analyze project source
      run: flutter analyze --no-fatal-infos
      
    - name: üß™ Run tests (if any)
      run: flutter test || echo "No tests found or tests failed - continuing with build"
      
    - name: üçé Configure iOS project
      env:
        VERSION: ${{ github.event.inputs.version || '5.0.0' }}
      run: |
        echo "üöÄ Configuring iOS project..."
        
        # Enable iOS platform
        flutter config --enable-ios
        
        # Create iOS project files if needed
        flutter create --platforms=ios --org com.gavra013 .
        
        # Fix iOS deployment target for Google Maps and other dependencies
        echo "üîß Setting iOS deployment target to 15.0..."
        if [ -f ios/Podfile ]; then
          sed -i '' 's/# platform :ios, .*/platform :ios, '\''15.0'\''/' ios/Podfile
          sed -i '' 's/platform :ios, .*/platform :ios, '\''15.0'\''/' ios/Podfile
        fi
        
        # Set deployment target in Xcode project
        if [ -f ios/Runner.xcodeproj/project.pbxproj ]; then
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [^;]*/IPHONEOS_DEPLOYMENT_TARGET = 15.0/g' ios/Runner.xcodeproj/project.pbxproj
          # Fix bundle identifier
          sed -i '' 's/com\.example\.gavraAndroidNew/com.gavra013.gavra-android/g' ios/Runner.xcodeproj/project.pbxproj
        fi
        
        # Update Info.plist with correct bundle ID and version
        if [ -f ios/Runner/Info.plist ]; then
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.gavra013.gavra-android" ios/Runner/Info.plist || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $VERSION" ios/Runner/Info.plist || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" ios/Runner/Info.plist || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName Gavra 013" ios/Runner/Info.plist || true
        fi
        
        echo "üì± iOS project configured successfully!"

    - name: üîê Setup iOS Certificates
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PRIVATE_KEY_BASE64: ${{ secrets.IOS_PRIVATE_KEY_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "üîê Setting up certificates..."
        
        # Create certificates directory
        mkdir -p ~/certificates
        
        # Decode certificates
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certificates/ios_distribution.cer
        echo "$IOS_PRIVATE_KEY_BASE64" | base64 --decode > ~/certificates/ios_private.key
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/certificates/profile.mobileprovision
        
        # Convert certificate to PEM if needed
        openssl x509 -inform DER -in ~/certificates/ios_distribution.cer -out ~/certificates/ios_distribution.pem 2>/dev/null || \
        cp ~/certificates/ios_distribution.cer ~/certificates/ios_distribution.pem
        
        # Create P12 with proper password
        CERT_PASS="${IOS_CERTIFICATE_PASSWORD:-}"
        openssl pkcs12 -export \
          -inkey ~/certificates/ios_private.key \
          -in ~/certificates/ios_distribution.pem \
          -out ~/certificates/ios_distribution.p12 \
          -passout pass:"$CERT_PASS"
        
        # Setup keychain
        security create-keychain -p "temppass" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temppass" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        security import ~/certificates/ios_distribution.p12 -k build.keychain -P "$CERT_PASS" -A -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "temppass" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
        cp ~/certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Get provisioning profile UUID for xcodebuild
        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i ~/certificates/profile.mobileprovision))
        echo "Provisioning Profile UUID: $PROFILE_UUID"
        
        echo "‚úÖ Certificates setup completed!"

    - name: üì± Build Signed IPA
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        VERSION: ${{ github.event.inputs.version || '5.0.0' }}
      run: |
        echo "üöÄ Building signed IPA..."
        
        # First build Flutter without code signing
        flutter build ios --release --no-codesign
        
        # Check if ios directory exists and navigate to it
        if [ ! -d "ios" ]; then
          echo "‚ùå Error: ios directory not found"
          ls -la
          exit 1
        fi
        
        # Update Xcode project settings for automatic signing
        cd ios
        
        # Verify we're in the right place
        if [ ! -f "Runner.xcodeproj/project.pbxproj" ]; then
          echo "‚ùå Error: Runner.xcodeproj not found"
          ls -la
          exit 1
        fi
        
        # Clean up any existing provisioning profile references completely
        sed -i '' 's/CODE_SIGN_STYLE = Manual/CODE_SIGN_STYLE = Automatic/' Runner.xcodeproj/project.pbxproj
        sed -i '' 's/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = '$APPLE_TEAM_ID';/' Runner.xcodeproj/project.pbxproj
        sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = "";/' Runner.xcodeproj/project.pbxproj
        
        # Clean Pods project to ensure no provisioning profiles are set
        if [ -f "Pods/Pods.xcodeproj/project.pbxproj" ]; then
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = "";/' Pods/Pods.xcodeproj/project.pbxproj
        fi
        
        echo "‚úÖ Cleaned all provisioning profile references"
        
        # Clean rebuild of Pods to ensure no cached provisioning profile settings  
        rm -rf Pods/
        rm -f Podfile.lock
        
        # Go back to root for flutter commands
        cd ..
        flutter clean
        flutter pub get
        
        # Return to ios directory for pod install
        cd ios
        pod install --clean-install
        
        # Archive using xcodebuild with AUTOMATIC signing (simpler)
        xcodebuild -workspace Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath build/Runner.xcarchive \
                   CODE_SIGN_STYLE=Automatic \
                   DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
                   PRODUCT_BUNDLE_IDENTIFIER="com.gavra013.gavra-android" \
                   archive
        
        # Create export options for App Store
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>$APPLE_TEAM_ID</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
                   -archivePath build/Runner.xcarchive \
                   -exportOptionsPlist ExportOptions.plist \
                   -exportPath build/
        
        # Move IPA to expected location
        mkdir -p ../build/ios/ipa/
        find build/ -name "*.ipa" -exec cp {} ../build/ios/ipa/ \;
        
        echo "‚úÖ IPA build completed!"

    - name: üì§ Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      run: |
        # Find IPA file
        IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -1)
        if [ -z "$IPA_PATH" ]; then
          echo "‚ùå No IPA file found!"
          exit 1
        fi
        
        echo "üì§ Uploading $IPA_PATH to TestFlight..."
        
        # Upload to TestFlight
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --username "$APPLE_ID" \
          --password "$APPLE_PASSWORD" \
          --verbose
        
        echo "‚úÖ Upload to TestFlight completed!"

    - name: üìã Build Summary
      run: |
        echo "üéâ iOS TESTFLIGHT DEPLOYMENT RESULTS:"
        echo "‚úÖ Flutter compilation successful"
        echo "‚úÖ iOS project configured"
        echo "‚úÖ Certificates installed"
        echo "‚úÖ IPA signed and built"
        echo "‚úÖ TestFlight upload completed"
        echo "üîó Check App Store Connect for processing status"
        echo "üì± TestFlight build should be available in 10-30 minutes"
        
    - name: üîç Debug Info (if enabled)
      if: ${{ github.event.inputs.debug_mode == 'true' }}
      run: |
        echo "üîç DEBUG MODE ENABLED"
        echo "Flutter version:"
        flutter --version
        echo "Xcode version:"
        xcodebuild -version
        echo "IPA file info:"
        find build/ios/ipa -name "*.ipa" -exec ls -lh {} \;
        echo "Certificates info:"
        security find-identity -v -p codesigning

    - name: üì¶ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts
        path: |
          build/ios/ipa/*.ipa
          ios/build/
        retention-days: 7
