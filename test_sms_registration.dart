#!/usr/bin/env dart

/// Test script za SMS registraciju funkcionalnost
/// Proverava da li SMS registracija radi kako treba

import 'dart:io';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('SMS Registracija Test', () {
    print('üß™ Pokretam testove SMS registracije...\n');

    test('Proveri dostupnost SMS servisa', () async {
      print('üì± Test 1: Proverava SMS servis...');

      // Ovde bismo testirali da li PhoneAuthService funkcioni≈°e
      // Za sada samo simuliramo
      final testResult = true; // Placeholder

      if (testResult) {
        print('‚úÖ SMS servis je dostupan');
      } else {
        print('‚ùå SMS servis nije dostupan');
      }

      expect(testResult, isTrue);
    });

    test('Proveri test brojevi vozaƒça', () async {
      print('üìû Test 2: Proverava test brojeve vozaƒça...');

      final expectedPhones = {
        'Bojan': '+381641162560',
        'Bruda': '+381641202844',
        'Svetlana': '+381658464160',
        'Bilevski': '+381641234567',
      };

      print('üìã Oƒçekivani brojevi:');
      expectedPhones.forEach((name, phone) {
        print('   ‚Ä¢ $name: $phone');
      });

      // Proverava da li su svi brojevi u validnom formatu
      bool allValid = true;
      expectedPhones.forEach((name, phone) {
        final isValid = RegExp(r'^\+381[0-9]{8,9}$').hasMatch(phone);
        if (!isValid) {
          print('‚ùå Nevaljan format broja za $name: $phone');
          allValid = false;
        } else {
          print('‚úÖ Valjan format broja za $name');
        }
      });

      expect(allValid, isTrue);
    });

    test('Proveri test OTP kodove', () async {
      print('üîê Test 3: Proverava test OTP kodove...');

      final testCodes = {
        '+381641162560': '123456', // Bojan
        '+381641202844': '123456', // Bruda
        '+381658464160': '123456', // Svetlana
        '+381641234567': '123456', // Bilevski
      };

      print('üîë Test OTP kodovi:');
      testCodes.forEach((phone, code) {
        print('   ‚Ä¢ $phone: $code');
      });

      // Proveri da li su svi kodovi 6-cifreni
      bool allValid = true;
      testCodes.forEach((phone, code) {
        if (code.length != 6 || !RegExp(r'^[0-9]+$').hasMatch(code)) {
          print('‚ùå Nevaljan OTP kod za $phone: $code');
          allValid = false;
        } else {
          print('‚úÖ Valjan OTP kod za $phone');
        }
      });

      expect(allValid, isTrue);
    });

    test('Proveri SMS registraciju flow', () async {
      print('üîÑ Test 4: Proverava SMS registraciju flow...');

      final steps = [
        '1. Vozaƒç bira ime iz liste',
        '2. Automatski se uƒçitava broj telefona',
        '3. Vozaƒç unosi ≈°ifru',
        '4. ≈†alje siƒô SMS kod',
        '5. Vozaƒç unosi SMS kod',
        '6. Verifikuje se kod',
        '7. Vozaƒç se oznaƒçava kao registrovan',
        '8. Prebacuje na login screen'
      ];

      print('üìã SMS registracija koraci:');
      steps.forEach((step) => print('   ‚Ä¢ $step'));

      // Simulacija - u realnom testu bi se testiralo svaki korak
      final flowValid = true;

      if (flowValid) {
        print('‚úÖ SMS registracija flow je ispravan');
      } else {
        print('‚ùå Problem u SMS registracija flow-u');
      }

      expect(flowValid, isTrue);
    });

    test('Proveri validaciju broja telefona', () async {
      print('üìû Test 5: Proverava validaciju broja telefona...');

      final testCases = [
        {'phone': '+381641162560', 'driver': 'Bojan', 'shouldBeValid': true},
        {
          'phone': '+381641162560',
          'driver': 'Bruda',
          'shouldBeValid': false // Pogre≈°an vozaƒç za taj broj
        },
        {
          'phone': '+381123456789',
          'driver': 'Bojan',
          'shouldBeValid': false // Nepoznat broj
        },
        {
          'phone': '641162560',
          'driver': 'Bojan',
          'shouldBeValid': false // Nema +381 prefix
        }
      ];

      bool allTestsPassed = true;

      for (final testCase in testCases) {
        final phone = testCase['phone'] as String;
        final driver = testCase['driver'] as String;
        final shouldBeValid = testCase['shouldBeValid'] as bool;

        // Simulacija validacije - u realnom testu bi se pozvao PhoneAuthService
        final expectedPhones = {
          'Bojan': '+381641162560',
          'Bruda': '+381641202844',
          'Svetlana': '+381658464160',
          'Bilevski': '+381641234567',
        };

        final isValid = expectedPhones[driver] == phone;

        if (isValid == shouldBeValid) {
          print('‚úÖ Test pro≈°ao: $driver + $phone = $isValid');
        } else {
          print(
              '‚ùå Test pao: $driver + $phone = $isValid (oƒçekivao $shouldBeValid)');
          allTestsPassed = false;
        }
      }

      expect(allTestsPassed, isTrue);
    });
  });
}

/// Funkcija za pokretanje testova iz terminala
void runSMSTests() async {
  print('üöÄ Pokretam SMS registraciju testove...\n');

  try {
    // Pokretamo testove
    main();
    print('\n‚úÖ Svi testovi su zavr≈°eni!');
  } catch (e) {
    print('\n‚ùå Gre≈°ka tokom testiranja: $e');
  }
}
