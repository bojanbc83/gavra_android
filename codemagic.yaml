workflows:
  ios-workflow:
    name: Gavra Bus iOS Build (Firebase + OneSignal)
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: Gavra Bus API Key
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        APP_ID: com.gavra013.gavraAndroid
        BUNDLE_ID: com.gavra013.gavraAndroid
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        SKIP_FIREBASE: "false"
        PRODUCT_BUNDLE_IDENTIFIER: "com.gavra013.gavraAndroid"
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"
        APPLE_TEAM_ID: "6CY9Q44KMQ"
        APP_STORE_CONNECT_ISSUER_ID: "d8b50e72-6330-401d-9aef-4ead356405ca"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "F4P38UR78G"
        CM_CERTIFICATE_PATH: "/tmp/api_key.p8"
        APP_STORE_CONNECT_PRIVATE_KEY: |
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgAZLtV2UfGC1YX7Qz
          wA1/rcwGkbHpX9ypDpgKApE0XvOgCgYIKoZIzj0DAQehRANCAAQvHPQ+kA1n8LmD
          wP1P9is1qe+t5KYkJ2aQZXCxHYsKiQcDjfEoTUHeEdQDm5g3BUzI3+vXBIlcradD
          /dpdkMZv
          -----END PRIVATE KEY-----
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: Set build number
        script: |
          #!/bin/bash
          set -e  # Exit on any error
          echo "Setting build number..."
          export BUILD_NUMBER=${BUILD_NUMBER:-$(($(date +%s) / 60))}
          echo "Build number: $BUILD_NUMBER"
          
      - name: Setup App Store Connect API Key
        script: |
          set -e
          echo "Setting up App Store Connect API key..."
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" > /tmp/api_key.p8
          chmod 600 /tmp/api_key.p8
          echo "API key saved to /tmp/api_key.p8"
          ls -la /tmp/api_key.p8
          
      - name: Check environment versions
        script: |
          set -e
          echo "Current working directory: $(pwd)"
          echo "Available disk space:"
          df -h .
          echo "Checking Flutter version..."
          flutter --version
          echo "Checking Xcode version..."
          xcodebuild -version
          echo "Checking CocoaPods version..."
          pod --version
          
      - name: Verify iOS Code Signing Setup
        script: |
          echo "Checking iOS code signing setup..."
          
          # Unlock keychain for code signing
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db || true
          
          echo "Available certificates in keychain:"
          security find-identity -v -p codesigning || true
          echo ""
          echo "Available provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true
          echo ""
          echo "Team ID: "
          
      - name: Verify iOS Firebase configuration
        script: |
          echo "Checking Firebase iOS configuration..."
          if [ -f ios/Runner/GoogleService-Info.plist ]; then
            echo "GoogleService-Info.plist found"
            plutil -p ios/Runner/GoogleService-Info.plist | head -10
          else
            echo "GoogleService-Info.plist not found!"
            exit 1
          fi
          
      - name: Get Flutter packages
        script: |
          set -e
          echo "Getting Flutter packages..."
          flutter precache --ios
          flutter clean
          flutter pub get
          
      - name: Clean and install CocoaPods dependencies
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios
          rm -rf Pods
          rm -f Podfile.lock
          pod cache clean --all || true
          pod deintegrate || true
          
          # Update pod repo first
          echo "Updating pod repo..."
          pod repo update || true
          
          cd ..
          flutter clean
          flutter pub get
          cd ios
          
          # Try different strategies for pod install
          echo "Trying pod install..."
          if ! pod install; then
            echo "Normal install failed, trying with verbose..."
            if ! pod install --verbose; then
              echo "Verbose failed, trying with repo update..."
              pod install --repo-update --verbose || (echo "All pod install strategies failed" && exit 1)
            fi
          fi
          
      - name: Flutter build iOS (Release)
        script: |
          echo "Building iOS app with Firebase + OneSignal..."
          echo "Using Flutter build with automatic signing"
          flutter pub get
          
          # Configure project with Team ID
          cd ios
          sed -i '' '/PRODUCT_BUNDLE_IDENTIFIER = com.gavra013.gavraAndroid;/a\
          				DEVELOPMENT_TEAM = 6CY9Q44KMQ;' Runner.xcodeproj/project.pbxproj
          echo "Team ID added to project.pbxproj"
          
          # Build using Flutter command with automatic signing
          cd ..
          flutter build ios \
            --release \
            --no-codesign \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
          
          # Now archive with xcodebuild using App Store Connect integration
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive \
            -authenticationKeyPath $CM_CERTIFICATE_PATH \
            -authenticationKeyID $APP_STORE_CONNECT_KEY_IDENTIFIER \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_ISSUER_ID \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM=6CY9Q44KMQ \
            IPHONEOS_DEPLOYMENT_TARGET=14.0
            
      - name: Export IPA for TestFlight
        script: |
          echo "Exporting IPA for App Store Connect/TestFlight..."
          cd ios
          mkdir -p build
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptionsTestFlight.plist \
            -authenticationKeyPath $CM_CERTIFICATE_PATH \
            -authenticationKeyID $APP_STORE_CONNECT_KEY_IDENTIFIER \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_ISSUER_ID
          if [ -f build/Runner.ipa ]; then
            echo "IPA successfully created!"
            ls -la build/Runner.ipa
          else
            echo "IPA creation failed!"
            exit 1
          fi
          
    artifacts:
      - ios/build/Runner.ipa
      - ios/build/Runner.xcarchive
      - ios/build/*.ipa
      - "**/*.ipa"
      - flutter_drive.log
      
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testing
        submit_to_app_store: false
      email:
        recipients:
          - gavriconi19@gmail.com
        notify:
          success: true
          failure: true

  android-workflow:
    name: Gavra Bus Android Build (Firebase + OneSignal)
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      flutter: stable
      vars:
        SKIP_FIREBASE: "false"
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: Verify Android configuration
        script: |
          echo "Verifying Android configuration..."
          if grep -q "ACCESS_FINE_LOCATION" android/app/src/main/AndroidManifest.xml; then
            echo "Location permissions configured"
          else
            echo "Location permissions missing!"
          fi
          if grep -q "onesignal_app_id" android/app/src/main/AndroidManifest.xml; then
            echo "OneSignal configured"
          else
            echo "OneSignal not configured!"
          fi
          
      - name: Get Flutter packages  
        script: |
          flutter clean
          flutter pub get
          
      - name: Flutter build APK (Release)
        script: |
          echo "Building Android app with Firebase + OneSignal..."
          flutter build apk --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
            
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - flutter_drive.log
      
    publishing:
      email:
        recipients:
          - gavriconi19@gmail.com
        notify:
          success: true
          failure: true
