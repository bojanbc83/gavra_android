workflows:
  # üçé iOS Workflow - Complete Firebase + OneSignal
  ios-workflow:
    name: Gavra Bus iOS Build (Firebase + OneSignal)
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        APP_ID: com.gavra013.gavraAndroid
        BUNDLE_ID: com.gavra013.gavraAndroid
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        SKIP_FIREBASE: "false"
        # iOS Code Signing - MANUAL OVERRIDE
        PRODUCT_BUNDLE_IDENTIFIER: "com.gavra013.gavraAndroid"
        # OneSignal App ID
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"        # üçé Apple Developer Account - Bojan Gavrilovic
        APPLE_TEAM_ID: "6CY9Q44KMQ"              # Team ID iz Apple Developer Account
        
        # üîë App Store Connect API (za TestFlight upload) - BOJAN'S DATA
        APP_STORE_CONNECT_ISSUER_ID: "d8b50e72-6330-401d-9aef-4ead356405ca"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "F4P38UR78G"
        APP_STORE_CONNECT_PRIVATE_KEY: |
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgAZLtV2UfGC1YX7Qz
          wA1/rcwGkbHpX9ypDpgKApE0XvOgCgYIKoZIzj0DAQehRANCAAQvHPQ+kA1n8LmD
          wP1P9is1qe+t5KYkJ2aQZXCxHYsKiQcDjfEoTUHeEdQDm5g3BUzI3+vXBIlcradD
          /dpdkMZv
          -----END PRIVATE KEY-----
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
      tag_patterns:
        - pattern: 'v*'
          include: true
    integrations:
      app_store_connect: codemagic_app_store_connect
    scripts:
      - name: Manual Certificate Setup
        script: |
          echo "üîê Manual certificate and provisioning profile setup..."
          
          # Create certificates directory
          mkdir -p ~/certificates
          
          # Decode and install certificate
          echo "$CM_CERTIFICATE" | base64 --decode > ~/certificates/ios_dist.p12
          echo "$CM_PROVISIONING_PROFILE" | base64 --decode > ~/certificates/profile.mobileprovision
          
          # Install certificate in keychain
          security import ~/certificates/ios_dist.p12 -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign -T /usr/bin/security -P ""
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # List what we have
          echo "Installed certificates:"
          security find-identity -v -p codesigning
          echo "Installed profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
      - name: DEBUG Environment Variables
        script: |
          echo "üîç DEBUG: Checking Environment Variables..."
          echo "CM_CERTIFICATE (first 100 chars):"
          echo "$CM_CERTIFICATE" | head -c 100
          echo ""
          echo "CM_PROVISIONING_PROFILE (first 100 chars):"
          echo "$CM_PROVISIONING_PROFILE" | head -c 100
          echo ""
          echo "Available certificates in keychain:"
          security find-identity -v -p codesigning || true
          echo ""
          echo "Available provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true
          
      - name: Verify iOS Firebase configuration
        script: |
          echo "üî• Checking Firebase iOS configuration..."
          if [ -f ios/Runner/GoogleService-Info.plist ]; then
            echo "‚úÖ GoogleService-Info.plist found"
            plutil -p ios/Runner/GoogleService-Info.plist | head -10
          else
            echo "‚ùå GoogleService-Info.plist not found!"
            exit 1
          fi
          
      - name: Verify iOS Firebase Service
        script: |
          echo "üî• Checking Firebase Service iOS implementation..."
          if [ -f lib/services/firebase_service_ios.dart ]; then
            echo "‚úÖ Firebase Service iOS found"
            head -20 lib/services/firebase_service_ios.dart
          else
            echo "‚ùå Firebase Service iOS missing!"
            exit 1
          fi
          
      - name: Verify iOS Audio Assets
        script: |
          echo "üîä Checking iOS audio assets..."
          if [ -f ios/Runner/Sounds/gavra.mp3 ]; then
            echo "‚úÖ iOS audio asset found"
            ls -la ios/Runner/Sounds/
          else
            echo "‚ùå iOS audio asset missing!"
            exit 1
          fi
          
      - name: Get Flutter packages
        script: |
          echo "üì¶ Getting Flutter packages..."
          flutter clean
          flutter pub get
          
      - name: Clean and install CocoaPods dependencies
        script: |
          echo "üçÉ Installing CocoaPods dependencies..."
          cd ios
          rm -rf Pods
          rm -f Podfile.lock
          pod cache clean --all || true
          pod deintegrate || true
          cd ..
          flutter clean
          flutter pub get
          cd ios
          pod install --repo-update --verbose
          
      - name: Verify iOS Build Configuration
        script: |
          echo "‚öôÔ∏è Verifying iOS build configuration..."
          cd ios
          # Check Info.plist for permissions
          if grep -q "NSLocationWhenInUseUsageDescription" Runner/Info.plist; then
            echo "‚úÖ Location permissions configured"
          else
            echo "‚ùå Location permissions missing!"
          fi
          
          # Check for Firebase configuration
          if grep -q "FirebaseApp.configure" Runner/AppDelegate.swift; then
            echo "‚úÖ Firebase configured in AppDelegate"
          else
            echo "‚ùå Firebase not configured in AppDelegate!"
          fi
          
      - name: Flutter build iOS (Release)
        script: |
          echo "üöÄ Building iOS app with Firebase + OneSignal..."
          flutter build ios --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER \
            --verbose
            
      - name: iOS Code Signing & Archive
        script: |
          echo "üì¶ Manual code signing and creating iOS archive for TestFlight..."
          cd ios
          
          # Setup manual code signing with environment variables
          echo "üîê Setting up manual code signing..."
          echo "Team ID: $APPLE_TEAM_ID"
          echo "Full Bundle ID: 6CY9Q44KMQ.com.gavra013.gavraAndroid"
          
          # Build archive with manual code signing using environment variables
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=com.gavra013.gavraAndroid \
            PROVISIONING_PROFILE_SPECIFIER="Gavra 013 App Store Profile" \
            -verbose
            
      - name: Export IPA for TestFlight
        script: |
          echo "üì± Exporting IPA for App Store Connect/TestFlight..."
          cd ios
          
          # Export IPA using TestFlight export options
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptionsTestFlight.plist \
            -verbose
            
          # Verify IPA was created
          if [ -f build/Runner.ipa ]; then
            echo "‚úÖ IPA successfully created for TestFlight upload"
            ls -la build/Runner.ipa
          else
            echo "‚ùå IPA creation failed!"
            exit 1
          fi
            
    artifacts:
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - ios/build/Runner.xcarchive
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - ios/build/Logs/
      
    publishing:
      # üöÄ TestFlight automatski upload na App Store Connect
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        
        # TestFlight configuration
        submit_to_testflight: true
        submit_to_app_store: false      # Ne ≈°alje odmah na App Store review
      
      email:
        recipients:
          - gavra.bus@example.com
        notify:
          success: true
          failure: true
      slack:
        channel: '#gavra-builds'
        notify_on_build_start: true
        notify:
          success: true
          failure: true
      
  # ü§ñ Android Workflow - Complete Firebase + OneSignal  
  android-workflow:
    name: Gavra Bus Android Build (Firebase + OneSignal)
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      flutter: stable
      vars:
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"
    scripts:
      - name: Verify Android Firebase configuration
        script: |
          echo "üî• Checking Firebase Android configuration..."
          if [ -f android/app/google-services.json ]; then
            echo "‚úÖ google-services.json found"
          else
            echo "‚ùå google-services.json not found!"
            exit 1
          fi
          
      - name: Verify Android Permissions
        script: |
          echo "üì± Checking Android permissions..."
          if grep -q "ACCESS_FINE_LOCATION" android/app/src/main/AndroidManifest.xml; then
            echo "‚úÖ Location permissions configured"
          else
            echo "‚ùå Location permissions missing!"
          fi
          
          if grep -q "onesignal_app_id" android/app/src/main/AndroidManifest.xml; then
            echo "‚úÖ OneSignal configured"
          else
            echo "‚ùå OneSignal not configured!"
          fi
          
      - name: Get Flutter packages  
        script: |
          flutter clean
          flutter pub get
          
      - name: Flutter build APK (Release)
        script: |
          echo "üöÄ Building Android app with Firebase + OneSignal..."
          flutter build apk --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
            
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - flutter_drive.log
      
    publishing:
      email:
        recipients:
          - gavra.bus@example.com
        notify:
          success: true
          failure: true
