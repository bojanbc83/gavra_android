workflows:
  ios-workflow:
    name: Gavra Bus iOS Build (Firebase + OneSignal)
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: Gavra Bus API Key
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        APP_ID: com.gavra013.gavraAndroid
        BUNDLE_ID: com.gavra013.gavraAndroid
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        SKIP_FIREBASE: "false"
        PRODUCT_BUNDLE_IDENTIFIER: "com.gavra013.gavraAndroid"
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"
        APPLE_TEAM_ID: "6CY9Q44KMQ"
        APP_STORE_CONNECT_ISSUER_ID: "d8b50e72-6330-401d-9aef-4ead356405ca"
        APP_STORE_CONNECT_KEY_IDENTIFIER: "F4P38UR78G"
        CM_CERTIFICATE_PATH: "/tmp/api_key.p8"
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: Set build number
        script: |
          #!/bin/bash
          set -e  # Exit on any error
          echo "Setting build number..."
          export BUILD_NUMBER=${BUILD_NUMBER:-$(($(date +%s) / 60))}
          echo "Build number: $BUILD_NUMBER"
          
      - name: Setup App Store Connect API Key
        script: |
          set -e
          echo "Setting up App Store Connect API key from environment..."
          
          # Use Codemagic's built-in certificate path from integration
          if [ -n "$CM_CERTIFICATE_PATH" ]; then
            echo "Using Codemagic integration certificate: $CM_CERTIFICATE_PATH"
            if [ -f "$CM_CERTIFICATE_PATH" ]; then
              echo "API key file found!"
              ls -la "$CM_CERTIFICATE_PATH"
            else
              echo "WARNING: API key file not found at $CM_CERTIFICATE_PATH"
              echo "Checking for alternative paths..."
              find /tmp -name "*.p8" -type f 2>/dev/null || echo "No .p8 files found in /tmp"
              
              # Try to use environment variables directly without file
              if [ -n "$APP_STORE_CONNECT_KEY_IDENTIFIER" ] && [ -n "$APP_STORE_CONNECT_ISSUER_ID" ]; then
                echo "Will use App Store Connect env vars directly in build step"
                export USE_ENV_VARS_ONLY=true
              else
                echo "ERROR: No API key file and no environment variables!"
                echo "Available environment variables:"
                env | grep -E "(APP_STORE|CM_|APPLE)" || echo "No relevant env vars found"
                exit 1
              fi
            fi
          else
            echo "WARNING: CM_CERTIFICATE_PATH not set!"
            echo "Checking if we can use environment variables directly..."
            if [ -n "$APP_STORE_CONNECT_KEY_IDENTIFIER" ] && [ -n "$APP_STORE_CONNECT_ISSUER_ID" ]; then
              echo "Will proceed with env vars only"
              export USE_ENV_VARS_ONLY=true
            else
              echo "ERROR: No certificate path and no environment variables!"
              exit 1
            fi
          fi
          
      - name: Check environment versions
        script: |
          set -e
          echo "Current working directory: $(pwd)"
          echo "Available disk space:"
          df -h .
          echo "Checking Flutter version..."
          flutter --version
          echo "Checking Xcode version..."
          xcodebuild -version
          echo "Checking CocoaPods version..."
          pod --version
          
      - name: Verify iOS Code Signing Setup
        script: |
          echo "Checking iOS code signing setup..."
          
          # Unlock keychain for code signing
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db || true
          
          echo "Available certificates in keychain:"
          security find-identity -v -p codesigning || true
          echo ""
          echo "Available provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || true
          echo ""
          echo "Team ID: $APPLE_TEAM_ID"
          
          # Import any provisioning profiles from project
          echo "Importing provisioning profiles from project..."
          if [ -f "../Gavra_013_App_Store_Profile_NEW.mobileprovision" ]; then
            echo "Found NEW provisioning profile"
            cp "../Gavra_013_App_Store_Profile_NEW.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/
          fi
          if [ -f "../Gavra_013_App_Store_Profile.mobileprovision" ]; then
            echo "Found original provisioning profile"
            cp "../Gavra_013_App_Store_Profile.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/
          fi
          
          # Show imported profiles
          echo "Profiles after import:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No profiles directory"
          
      - name: Verify iOS Firebase configuration
        script: |
          echo "Checking Firebase iOS configuration..."
          if [ -f ios/Runner/GoogleService-Info.plist ]; then
            echo "GoogleService-Info.plist found"
            plutil -p ios/Runner/GoogleService-Info.plist | head -10
          else
            echo "GoogleService-Info.plist not found!"
            exit 1
          fi
          
      - name: Get Flutter packages
        script: |
          set -e
          echo "Getting Flutter packages..."
          flutter precache --ios
          flutter clean
          flutter pub get
          
      - name: Clean and install CocoaPods dependencies
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios
          rm -rf Pods
          rm -f Podfile.lock
          pod cache clean --all || true
          pod deintegrate || true
          
          # Update pod repo first
          echo "Updating pod repo..."
          pod repo update || true
          
          cd ..
          flutter clean
          flutter pub get
          cd ios
          
          # Try different strategies for pod install
          echo "Trying pod install..."
          if ! pod install; then
            echo "Normal install failed, trying with verbose..."
            if ! pod install --verbose; then
              echo "Verbose failed, trying with repo update..."
              pod install --repo-update --verbose || (echo "All pod install strategies failed" && exit 1)
            fi
          fi
          
      - name: Flutter build iOS (Release)
        script: |
          echo "Building iOS app with Firebase + OneSignal..."
          echo "Using Flutter build with automatic signing"
          flutter pub get
          
          # Configure project with Team ID 
          cd ios
          
          # Backup original project file
          cp Runner.xcodeproj/project.pbxproj Runner.xcodeproj/project.pbxproj.backup
          
          # Add DEVELOPMENT_TEAM after each PRODUCT_BUNDLE_IDENTIFIER
          if grep -q "DEVELOPMENT_TEAM = 6CY9Q44KMQ" Runner.xcodeproj/project.pbxproj; then
            echo "DEVELOPMENT_TEAM already exists in project.pbxproj"
          else
            echo "Adding DEVELOPMENT_TEAM to project.pbxproj"
            # Try different sed approaches for compatibility - fix indentation
            if sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.gavra013.gavraAndroid;/&\'$'\n\t\t\t\tDEVELOPMENT_TEAM = 6CY9Q44KMQ;/g' Runner.xcodeproj/project.pbxproj 2>/dev/null; then
              echo "Team ID added successfully with sed -i '' (proper indentation)"
            elif sed -i 's/PRODUCT_BUNDLE_IDENTIFIER = com.gavra013.gavraAndroid;/&\n\t\t\t\tDEVELOPMENT_TEAM = 6CY9Q44KMQ;/g' Runner.xcodeproj/project.pbxproj 2>/dev/null; then
              echo "Team ID added successfully with sed -i (proper indentation)"
            else
              echo "WARNING: Could not add DEVELOPMENT_TEAM automatically"
              echo "Manual verification needed..."
            fi
          fi
          
          # Verify the modification worked properly
          echo "Verifying DEVELOPMENT_TEAM was added correctly..."
          if grep -A 1 -B 1 "DEVELOPMENT_TEAM = 6CY9Q44KMQ" Runner.xcodeproj/project.pbxproj; then
            echo "DEVELOPMENT_TEAM verification successful"
          else
            echo "DEVELOPMENT_TEAM verification failed - restoring backup"
            cp Runner.xcodeproj/project.pbxproj.backup Runner.xcodeproj/project.pbxproj
          fi
          
          # Build using Flutter command with automatic signing
          cd ..
          echo "Starting Flutter iOS build..."
          
          # Ensure iOS is cached
          flutter precache --ios --no-android --no-web
          
          # Build with detailed output and error capture
          echo "Running flutter build ios with detailed logging..."
          if ! flutter build ios \
            --release \
            --verbose \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER \
            --no-tree-shake-icons; then
            echo "ERROR: flutter build ios failed!"
            echo "Checking for specific error details..."
            
            # Check if it's a signing issue
            if flutter build ios --release --verbose 2>&1 | grep -i "signing\|provision\|certificate\|team"; then
              echo "Detected signing-related errors in flutter build ios"
            fi
            
            echo "Continuing to attempt IPA build anyway..."
          else
            echo "flutter build ios completed successfully"
          fi
          
          # Now archive with xcodebuild using App Store Connect integration
          cd ios
          
          # Create build directory
          mkdir -p build
          
          # Use Codemagic's built-in certificate path
          echo "Using API key path: $CM_CERTIFICATE_PATH"
          
          # Verify the workspace exists  
          if [ ! -d "Runner.xcworkspace" ]; then
            echo "ERROR: Runner.xcworkspace directory not found!"
            echo "Available files in ios directory:"
            ls -la
            exit 1
          fi
          
          echo "Building archive with xcodebuild..."
          
          # Show current certificates and profiles
          echo "=== CERTIFICATES ==="
          security find-identity -v -p codesigning | head -5
          echo "=== PROVISIONING PROFILES ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ | head -5 || echo "No profiles found"
          echo "========================="
          
          # Clean any previous builds
          echo "Cleaning previous builds..."
          xcodebuild clean -workspace Runner.xcworkspace -scheme Runner -configuration Release
          
          # Build archive
          echo "Attempting archive with App Store Connect authentication..."
          
          # Try to fix provisioning profile issues
          echo "=== FIXING PROVISIONING ISSUES ==="
          
          # Create provisioning profiles directory if it doesn't exist
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Set up keychain and certificates properly
          security list-keychains -s ~/Library/Keychains/login.keychain-db
          security default-keychain -s ~/Library/Keychains/login.keychain-db
          security unlock-keychain -p "" ~/Library/Keychains/login.keychain-db
          
          # Try to download provisioning profiles automatically
          echo "Setting up automatic provisioning..."
          
          # Use Flutter's build ipa command which handles signing better
          echo "Using Flutter build ipa for better signing management..."
          cd ..
          
          # Ensure we have the export options file
          if [ ! -f "ios/ExportOptionsTestFlight.plist" ]; then
            echo "Creating ExportOptionsTestFlight.plist..."
            echo '<?xml version="1.0" encoding="UTF-8"?>' > ios/ExportOptionsTestFlight.plist
            echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ios/ExportOptionsTestFlight.plist
            echo '<plist version="1.0">' >> ios/ExportOptionsTestFlight.plist
            echo '<dict>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>method</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <string>app-store</string>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>teamID</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <string>6CY9Q44KMQ</string>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>uploadBitcode</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <false/>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>uploadSymbols</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <true/>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>compileBitcode</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <false/>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>signingStyle</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <string>automatic</string>' >> ios/ExportOptionsTestFlight.plist
            echo '    <key>destination</key>' >> ios/ExportOptionsTestFlight.plist
            echo '    <string>export</string>' >> ios/ExportOptionsTestFlight.plist
            echo '</dict>' >> ios/ExportOptionsTestFlight.plist
            echo '</plist>' >> ios/ExportOptionsTestFlight.plist
          fi
          
          # Try flutter build ipa with automatic signing
          echo "Building IPA with Flutter (automatic signing)..."
          
          # First try without export options to see if basic build works
          echo "Attempting basic flutter build ipa without custom export options..."
          if flutter build ipa \
            --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER; then
            echo "Basic Flutter build ipa succeeded!"
            
            # Check where the IPA was created
            echo "Looking for generated IPA files..."
            find . -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found with find"
            
            # Check common locations
            if [ -f "build/ios/ipa/gavra_android.ipa" ]; then
              mkdir -p ios/build
              cp "build/ios/ipa/gavra_android.ipa" ios/build/Runner.ipa
              echo "IPA copied to ios/build/Runner.ipa"
              ls -la ios/build/Runner.ipa
            elif [ -f "build/ios/ipa/Runner.ipa" ]; then
              mkdir -p ios/build
              cp "build/ios/ipa/Runner.ipa" ios/build/Runner.ipa
              echo "IPA copied from Runner.ipa to ios/build/Runner.ipa"
              ls -la ios/build/Runner.ipa
            else
              echo "IPA not found at expected locations, checking build directory..."
              ls -la build/ios/ipa/ 2>/dev/null || echo "No build/ios/ipa directory"
              ls -la build/ios/ 2>/dev/null || echo "No build/ios directory"
              
              # Try to find any IPA file
              IPA_FILE=$(find build -name "*.ipa" -type f | head -1)
              if [ -n "$IPA_FILE" ]; then
                echo "Found IPA at: $IPA_FILE"
                mkdir -p ios/build
                cp "$IPA_FILE" ios/build/Runner.ipa
                echo "IPA copied to ios/build/Runner.ipa"
                ls -la ios/build/Runner.ipa
              else
                echo "ERROR: No IPA file found anywhere in build directory"
                exit 1
              fi
            fi
          else
            echo "Basic Flutter build ipa failed. Checking detailed error..."
            echo "Trying with export options plist..."
            
            if flutter build ipa \
              --release \
              --build-name=1.0.$BUILD_NUMBER \
              --build-number=$BUILD_NUMBER \
              --export-options-plist=ios/ExportOptionsTestFlight.plist; then
              echo "Flutter build ipa with export options succeeded!"
              
              # Move the ipa to the expected location for artifacts
              if [ -f "build/ios/ipa/gavra_android.ipa" ]; then
                mkdir -p ios/build
                cp "build/ios/ipa/gavra_android.ipa" ios/build/Runner.ipa
                echo "IPA copied to ios/build/Runner.ipa"
                ls -la ios/build/Runner.ipa
              else
                echo "IPA not found at expected location!"
                find build -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found"
                exit 1
              fi
            else
              echo "Flutter build ipa with export options also failed!"
              echo "Attempting direct xcodebuild approach with detailed logging..."
              cd ios
              
              # Show detailed environment for debugging
              echo "=== DETAILED ENVIRONMENT DEBUG ==="
              echo "Current directory: $(pwd)"
              echo "Available certificates:"
              security find-identity -v -p codesigning
              echo "Available provisioning profiles:"
              find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec security cms -D -i {} \; 2>/dev/null | grep -A 3 -B 3 "Name\|TeamIdentifier\|UUID" || echo "No profiles or can't read them"
              echo "Team ID from environment: $APPLE_TEAM_ID"
              echo "Bundle ID: com.gavra013.gavraAndroid"
              
              # Try a simple build first to isolate the issue
              echo "Trying basic xcodebuild archive without auth parameters..."
              if xcodebuild -workspace Runner.xcworkspace \
                -scheme Runner \
                -configuration Release \
                -destination generic/platform=iOS \
                -archivePath build/Runner.xcarchive \
                archive \
                CODE_SIGN_STYLE=Automatic \
                DEVELOPMENT_TEAM=6CY9Q44KMQ \
                IPHONEOS_DEPLOYMENT_TARGET=14.0 \
                -allowProvisioningUpdates \
                -verbose; then
                echo "Basic xcodebuild archive succeeded!"
              else
                echo "Basic xcodebuild also failed. This suggests a fundamental signing issue."
                echo "Let's try manual signing approach..."
                
                # Try automatic signing as last resort
                echo "Attempting automatic signing..."
                xcodebuild -workspace Runner.xcworkspace \
                  -scheme Runner \
                  -configuration Release \
                  -destination generic/platform=iOS \
                  -archivePath build/Runner.xcarchive \
                  archive \
                  CODE_SIGN_STYLE=Automatic \
                  DEVELOPMENT_TEAM=6CY9Q44KMQ \
                  IPHONEOS_DEPLOYMENT_TARGET=14.0 \
                  -allowProvisioningUpdates \
                  -verbose || {
                  echo "ALL BUILD METHODS FAILED!"
                  echo "Final diagnostics:"
                  echo "1. Workspace structure:"
                  ls -la Runner.xcworkspace/
                  echo "2. Project settings:"
                  grep -A 5 -B 5 "PRODUCT_BUNDLE_IDENTIFIER\|DEVELOPMENT_TEAM" Runner.xcodeproj/project.pbxproj || echo "Could not grep project file"
                  exit 1
                }
              fi
            fi
          fi
            
          # Check if we have an IPA already (from Flutter build) or need to create archive
          cd ios
          if [ -f "build/Runner.ipa" ]; then
            echo "IPA already created by Flutter build - skipping archive step"
          elif [ ! -d "build/Runner.xcarchive" ]; then
            echo "ERROR: Neither IPA nor archive was created!"
            echo "Available files in build directory:"
            ls -la build/ || echo "No build directory"
            exit 1
          else
            echo "Archive created successfully - will export IPA"
          fi
            
      - name: Export IPA for TestFlight
        script: |
          echo "Preparing IPA for App Store Connect/TestFlight..."
          cd ios
          
          # Check if we already have an IPA from Flutter build
          if [ -f "build/Runner.ipa" ]; then
            echo "IPA already available from Flutter build!"
            ls -la build/Runner.ipa
            
            # Verify it's a valid IPA
            if file build/Runner.ipa | grep -q "Zip"; then
              echo "IPA file is valid - ready for TestFlight"
            else
              echo "WARNING: IPA file may be corrupted"
              file build/Runner.ipa
            fi
          elif [ -d "build/Runner.xcarchive" ]; then
            echo "Archive found - exporting IPA from archive..."
            
            # Export IPA from archive
            if [ -f "$CM_CERTIFICATE_PATH" ] && [ "$USE_ENV_VARS_ONLY" != "true" ]; then
              echo "Using API key file for export"
              xcodebuild -exportArchive \
                -archivePath build/Runner.xcarchive \
                -exportPath build \
                -exportOptionsPlist ExportOptionsTestFlight.plist \
                -authenticationKeyPath "$CM_CERTIFICATE_PATH" \
                -authenticationKeyID "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
                -authenticationKeyIssuerID "$APP_STORE_CONNECT_ISSUER_ID" \
                -verbose
            else
              echo "Using automatic export without API key file"
              xcodebuild -exportArchive \
                -archivePath build/Runner.xcarchive \
                -exportPath build \
                -exportOptionsPlist ExportOptionsTestFlight.plist \
                -verbose
            fi
            
            # Verify IPA was created from export
            if [ -f build/Runner.ipa ]; then
              echo "IPA successfully exported from archive!"
              ls -la build/Runner.ipa
            else
              echo "Export failed! Available files:"
              ls -la build/
              exit 1
            fi
          else
            echo "ERROR: No IPA or archive found!"
            echo "Available files in build directory:"
            ls -la build/ || echo "No build directory"
            exit 1
          fi
          
    artifacts:
      - ios/build/Runner.ipa
      - ios/build/Runner.xcarchive
      - ios/build/*.ipa
      - "**/*.ipa"
      - flutter_drive.log
      
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testing
        submit_to_app_store: false
      email:
        recipients:
          - gavriconi19@gmail.com
        notify:
          success: true
          failure: true

  android-workflow:
    name: Gavra Bus Android Build (Firebase + OneSignal)
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      flutter: stable
      vars:
        SKIP_FIREBASE: "false"
        ONESIGNAL_APP_ID: "4fd57af1-568a-45e0-a737-3b3918c4e92a"
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
        - pattern: develop
          include: true
          source: true
      tag_patterns:
        - pattern: 'v*'
          include: true
    scripts:
      - name: Verify Android configuration
        script: |
          echo "Verifying Android configuration..."
          if grep -q "ACCESS_FINE_LOCATION" android/app/src/main/AndroidManifest.xml; then
            echo "Location permissions configured"
          else
            echo "Location permissions missing!"
          fi
          if grep -q "onesignal_app_id" android/app/src/main/AndroidManifest.xml; then
            echo "OneSignal configured"
          else
            echo "OneSignal not configured!"
          fi
          
      - name: Get Flutter packages  
        script: |
          flutter clean
          flutter pub get
          
      - name: Flutter build APK (Release)
        script: |
          echo "Building Android app with Firebase + OneSignal..."
          flutter build apk --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER
            
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - flutter_drive.log
      
    publishing:
      email:
        recipients:
          - gavriconi19@gmail.com
        notify:
          success: true
          failure: true
