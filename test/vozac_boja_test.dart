import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import '../lib/utils/vozac_boja.dart';
import '../lib/services/vozac_mapping_service.dart';

/// Test konzistentnosti boja vozaƒça izmeƒëu svih servisa i ekrana
void main() {
  group('üé® Provjera boja za svakog vozaƒça', () {

    // Oƒçekivane boje za svakog vozaƒça
    final Map<String, int> expectedColors = {
      'Bilevski': 0xFFFF9800, // narand≈æasta
      'Bruda': 0xFF7C4DFF,    // ljubiƒçasta
      'Bojan': 0xFF00E5FF,    // svetla cyan plava
      'Svetlana': 0xFFFF1493, // deep pink
    };

    group('üîç VozacBoja klasa - centralni servis boja', () {
      test('Svi vozaƒçi iz VozacMappingService imaju boje u VozacBoja', () {
        final vozaci = VozacMappingService.getAllVozacNames();

        for (final vozac in vozaci) {
          final boja = VozacBoja.get(vozac);
          expect(boja, isNotNull, reason: 'Vozaƒç $vozac mora imati boju u VozacBoja');
          expect(boja, isNot(Colors.transparent), reason: 'Vozaƒç $vozac ne smije imati transparentnu boju');

          // Provjeri da li je boja oƒçekivana
          final expectedColor = expectedColors[vozac];
          expect(expectedColor, isNotNull, reason: 'Vozaƒç $vozac mora imati definisanu oƒçekivanu boju');

          final expectedColorObj = Color(expectedColor!);
          expect(boja, expectedColorObj, reason: 'Boja za $vozac ne odgovara oƒçekivanoj');
        }
      });

      test('VozacBoja ima samo vozaƒçe iz VozacMappingService', () {
        final vozacBojaDrivers = VozacBoja.validDrivers;
        final mappingDrivers = VozacMappingService.getAllVozacNames();

        expect(vozacBojaDrivers.length, mappingDrivers.length,
            reason: 'VozacBoja mora imati isti broj vozaƒça kao VozacMappingService');

        for (final driver in vozacBojaDrivers) {
          expect(mappingDrivers, contains(driver),
              reason: 'Vozaƒç $driver iz VozacBoja mora postojati u VozacMappingService');
        }
      });

      test('Validacija vozaƒça radi ispravno', () {
        final validDrivers = VozacMappingService.getAllVozacNames();

        for (final driver in validDrivers) {
          expect(VozacBoja.isValidDriver(driver), true,
              reason: 'Vozaƒç $driver mora biti validan u VozacBoja');
        }

        // Test nevalidnih vozaƒça
        expect(VozacBoja.isValidDriver('Marko'), false);
        expect(VozacBoja.isValidDriver(null), false);
        expect(VozacBoja.isValidDriver(''), false);
      });
    });

    group('üîç Test za svakog vozaƒça posebno - BOJE', () {

      test('BILEVSKI - boja', () {
        final boja = VozacBoja.get('Bilevski');
        expect(boja, Color(0xFFFF9800)); // narand≈æasta
        expect(boja, isNot(Colors.transparent));
        expect(VozacBoja.isValidDriver('Bilevski'), true);
        print('‚úÖ BILEVSKI: Boja = ${boja.toString()}');
      });

      test('BRUDA - boja', () {
        final boja = VozacBoja.get('Bruda');
        expect(boja, Color(0xFF7C4DFF)); // ljubiƒçasta
        expect(boja, isNot(Colors.transparent));
        expect(VozacBoja.isValidDriver('Bruda'), true);
        print('‚úÖ BRUDA: Boja = ${boja.toString()}');
      });

      test('BOJAN - boja', () {
        final boja = VozacBoja.get('Bojan');
        expect(boja, Color(0xFF00E5FF)); // svetla cyan plava
        expect(boja, isNot(Colors.transparent));
        expect(VozacBoja.isValidDriver('Bojan'), true);
        print('‚úÖ BOJAN: Boja = ${boja.toString()}');
      });

      test('SVETLANA - boja', () {
        final boja = VozacBoja.get('Svetlana');
        expect(boja, Color(0xFFFF1493)); // deep pink
        expect(boja, isNot(Colors.transparent));
        expect(VozacBoja.isValidDriver('Svetlana'), true);
        print('‚úÖ SVETLANA: Boja = ${boja.toString()}');
      });
    });

    group('‚ùå Test nevalidnih vozaƒça - BOJE', () {
      test('Nevalidni vozaƒçi dobijaju transparentnu boju', () {
        final nevalidniVozaci = ['Marko', 'Nikola', 'Petar', 'Gavra', null, ''];

        for (final vozac in nevalidniVozaci) {
          final boja = VozacBoja.get(vozac);
          expect(boja, Colors.transparent,
              reason: 'Nevalidni vozaƒç "$vozac" mora dobiti transparentnu boju');
          expect(VozacBoja.isValidDriver(vozac), false,
              reason: 'Nevalidni vozaƒç "$vozac" ne smije biti validan');
        }
      });
    });

    group('üìä Sa≈æetak boja svih vozaƒça', () {
      test('Prikaz svih boja', () {
        print('\nüé® SA≈ΩETAK BOJA SVIH VOZAƒåA:');
        print('=' * 50);

        final vozaci = VozacMappingService.getAllVozacNames();
        for (final vozac in vozaci) {
          final boja = VozacBoja.get(vozac);
          final hexColor = '#${boja.value.toRadixString(16).toUpperCase().padLeft(8, '0')}';
          print('üöó $vozac: $hexColor');
        }
        print('');
      });
    });

    group('üîó Integracija sa drugim servisima', () {
      test('VozacMappingService i VozacBoja su sinhronizovani', () {
        final mappingDrivers = VozacMappingService.getAllVozacNames();
        final bojaDrivers = VozacBoja.validDrivers;

        expect(mappingDrivers.length, bojaDrivers.length);
        expect(mappingDrivers.toSet(), bojaDrivers.toSet());
      });

      test('Svaki UUID iz VozacMappingService ima odgovarajuƒáu boju', () {
        final uuids = VozacMappingService.getAllVozacUuids();

        for (final uuid in uuids) {
          final ime = VozacMappingService.getVozacIme(uuid);
          expect(ime, isNotNull);

          final boja = VozacBoja.get(ime);
          expect(boja, isNot(Colors.transparent),
              reason: 'UUID $uuid (vozaƒç $ime) mora imati validnu boju');
        }
      });
    });
  });
}