default_platform(:ios)

platform :ios do
  desc "Build iOS app with manual signing"
  lane :build_manual do
    puts "🔍 Environment Variables Check:"
    puts "IOS_CERTIFICATE_BASE64 present: #{!ENV['IOS_CERTIFICATE_BASE64'].nil?}"
    puts "IOS_CERTIFICATE_PASSWORD present: #{!ENV['IOS_CERTIFICATE_PASSWORD'].nil?}"
    puts "IOS_PROVISIONING_PROFILE_BASE64 present: #{!ENV['IOS_PROVISIONING_PROFILE_BASE64'].nil?}"
    
    # Set Xcode path explicitly - use default Xcode
    xcode_select("/Applications/Xcode.app")
    
    # Create keychain for code signing
    create_keychain(
      name: "ios-build.keychain",
      password: "",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    
    # Install certificate from base64
    certificate_path = File.expand_path("../ios_distribution.p12")
    puts "Creating certificate at: #{certificate_path}"
    
    begin
      # Use GitHub Actions environment variable
      certificate_base64 = ENV['IOS_CERTIFICATE_BASE64']
      File.write(certificate_path, Base64.decode64(certificate_base64))
      puts "✅ Certificate file created: #{File.size(certificate_path)} bytes"
    rescue => e
      puts "❌ Error creating certificate: #{e.message}"
      raise e
    end

    # Get password from environment variable
    cert_password = ENV["IOS_CERTIFICATE_PASSWORD"] || "gavra123"
    puts "🔨 Using certificate password: '#{cert_password}'"
    
    begin
      import_certificate(
        certificate_path: certificate_path,
        certificate_password: cert_password,
        keychain_name: "ios-build.keychain",
        keychain_password: ""
      )
      puts "✅ Certificate imported successfully"
    rescue => e
      puts "❌ Certificate import failed: #{e.message}"
      # Try with empty password
      puts "🔄 Trying with empty password..."
      begin
        import_certificate(
          certificate_path: certificate_path,
          certificate_password: "",
          keychain_name: "ios-build.keychain",
          keychain_password: ""
        )
        puts "✅ Certificate imported with empty password"
      rescue => e2
        puts "❌ Certificate import failed with empty password: #{e2.message}"
        raise "Certificate import failed with both passwords: #{e.message} | #{e2.message}"
      end
    end
    
    # Install provisioning profile from base64
    profile_path = File.expand_path("../app_store.mobileprovision")
    puts "Creating provisioning profile at: #{profile_path}"
    
    begin
      File.write(profile_path, Base64.decode64(ENV['IOS_PROVISIONING_PROFILE_BASE64']))
      puts "✅ Provisioning profile created: #{File.size(profile_path)} bytes"
    rescue => e
      puts "❌ Error creating provisioning profile: #{e.message}"
      raise e
    end
    
    install_provisioning_profile(path: profile_path)
    
    # Build the app
    puts "🔨 Starting iOS build process..."
    workspace_path = File.expand_path("../Runner.xcworkspace")
    puts "Workspace path: #{workspace_path}"
    puts "Workspace exists: #{File.exist?(workspace_path)}"
    
    begin
      build_app(
        workspace: workspace_path,
        scheme: "Runner",
        configuration: "Release",
        export_method: "app-store",
        xcargs: "DEVELOPMENT_TEAM=6CY9Q44KMQ CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY='iPhone Distribution: Bojan Gavrilovic (6CY9Q44KMQ)' PROVISIONING_PROFILE_SPECIFIER='Gavra 013 App Store Profile'",
        export_options: {
          method: "app-store",
          teamID: "6CY9Q44KMQ",
          signingStyle: "manual",
          provisioningProfiles: {
            "com.gavra013.gavraAndroid" => "Gavra 013 App Store Profile"
          }
        }
      )
      puts "✅ Build completed successfully!"
      
      # Check what files were created
      puts "📁 Checking build output files..."
      Dir.glob("**/*.ipa").each do |ipa_file|
        puts "Found IPA: #{ipa_file} (#{File.size(ipa_file)} bytes)"
      end
      
      # Try to find the IPA file
      ipa_path = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
      if ipa_path && File.exist?(ipa_path)
        puts "✅ Found IPA at lane context path: #{ipa_path}"
      else
        puts "⚠️  IPA not found at lane context path: #{ipa_path}"
        # Look for IPA files in common locations
        possible_ipa_paths = [
          "./Runner.ipa",
          "./build/Runner.ipa", 
          Dir.glob("**/*.ipa").first
        ].compact
        
        ipa_path = possible_ipa_paths.find { |path| File.exist?(path) }
        if ipa_path
          puts "✅ Found IPA at: #{ipa_path}"
        else
          puts "❌ No IPA file found!"
          puts "Available files in current directory:"
          Dir.glob("*").each { |f| puts "  #{f}" }
          raise "IPA file not found after build"
        end
      end
      
      # Upload to TestFlight (temporarily disabled for debugging)
      puts "🚀 TestFlight upload temporarily disabled for debugging..."
      puts "Build completed successfully! IPA should be available for upload."
      
      # Find the API key file in multiple possible locations
      api_key_path = nil
      possible_paths = [
        "../AuthKey_F4P38UR78G.p8",
        "./AuthKey_F4P38UR78G.p8", 
        "~/private_keys/AuthKey_F4P38UR78G.p8",
        File.expand_path("../AuthKey_F4P38UR78G.p8"),
        File.expand_path("../../AuthKey_F4P38UR78G.p8")
      ]
      
      possible_paths.each do |path|
        expanded_path = File.expand_path(path)
        if File.exist?(expanded_path)
          api_key_path = expanded_path
          puts "✅ Found API key at: #{api_key_path}"
          break
        end
      end
      
      unless api_key_path
        puts "❌ API key file not found in any of these locations:"
        possible_paths.each { |path| puts "  - #{File.expand_path(path)}" }
        puts "⚠️  TestFlight upload would fail due to missing API key"
      else
        puts "✅ API key ready for TestFlight upload"
      end
      
      # Comment out the actual upload for now
      # pilot(
      #   api_key_path: api_key_path,
      #   api_key: "F4P38UR78G", 
      #   issuer_id: "d8b50e72-6330-401d-9aef-4ead356405ca",
      #   ipa: Actions.lane_context[SharedValues::IPA_OUTPUT_PATH] || "./Runner.ipa",
      #   skip_waiting_for_build_processing: true,
      #   skip_submission: true,
      #   team_id: "6CY9Q44KMQ"
      # )
      puts "✅ TestFlight upload completed!"
      
    rescue => e
      puts "❌ Build failed: #{e.message}"
      puts "❌ Error details: #{e.backtrace.first(5).join('\n')}"
      raise e
    end
  end
end
