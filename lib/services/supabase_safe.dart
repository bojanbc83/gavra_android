// üõ°Ô∏è SUPABASE SAFE WRAPPER
// ‚úÖ –ö–û–†–ò–°–¢–ò –°–ï –£ –ê–ü–õ–ò–ö–ê–¶–ò–à–ò - –ù–ï –ë–†–ò–°–ê–¢–ò!
//
// –û–≤–∞—ò —Å–µ—Ä–≤–∏—Å "–æ–±–∞–≤–∏—ò–∞" Supabase –ø–æ–∑–∏–≤–µ —É try-catch –±–ª–æ–∫–æ–≤–µ
// –∏ —Å–ø—Ä–µ—á–∞–≤–∞ crash-–æ–≤–µ –∞–∫–æ –Ω–µ–∫–∞ —Ç–∞–±–µ–ª–∞ –Ω–µ –ø–æ—Å—Ç–æ—ò–∏ –∏–ª–∏ –∏–º–∞ –≥—Ä–µ—à–∫–µ.
// –ö–æ—Ä–∏—Å—Ç–∏ —Å–µ —É: sms_service, ruta_service, realtime_service, –∏—Ç–¥.

import 'package:supabase_flutter/supabase_flutter.dart';

class SupabaseSafe {
  static final _client = Supabase.instance.client;

  /// Safely runs a select on [table] with optional [columns]. Returns the raw
  /// response (List/Map) or an empty list if the table doesn't exist or an
  /// error occurs.
  static Future<dynamic> select(String table, {String? columns}) async {
    try {
      if (columns != null) {
        return await _client.from(table).select(columns);
      }
      return await _client.from(table).select();
    } on PostgrestException {
      // Error handling - logging removed for production
      return <dynamic>[];
    } catch (e) {
      // Error handling - logging removed for production
      return <dynamic>[];
    }
  }

  static Future<dynamic> delete(
    String table,
    String column,
    String value,
  ) async {
    try {
      return await _client.from(table).delete().eq(column, value);
    } on PostgrestException {
      // Error handling - logging removed for production
      return <dynamic>[];
    } catch (e) {
      // Error handling - logging removed for production
      return <dynamic>[];
    }
  }

  static Future<dynamic> rpc(String fn, {Map<String, dynamic>? params}) async {
    try {
      return await _client.rpc(fn, params: params);
    } on PostgrestException {
      // Error handling - logging removed for production
      return <dynamic>[];
    } catch (e) {
      // Error handling - logging removed for production
      return <dynamic>[];
    }
  }

  /// Run an arbitrary Supabase Future-returning function and return [fallback]
  /// if it throws a PostgrestException or any other error. Useful for chained
  /// queries like `.from(...).select().eq()...` where we want to catch table-missing
  /// errors in one place.
  static Future<T?> run<T>(Future<T> Function() fn, {T? fallback}) async {
    try {
      return await fn();
    } on PostgrestException {
      // Error handling - logging removed for production
      return fallback;
    } catch (e) {
      // Error handling - logging removed for production
      return fallback;
    }
  }
}
